[general]
ui = ttyui
accounts = Personal, UserVoice, Courtyard
pythonfile = ~/tilde/mutt/offlineimap.py
fsync = false

[notifications]
notifier = terminal-notifier -message {body} -title {summary} -source com.apple.Mail
max = 3

[Account Personal]
localrepository = Personal-Local
remoterepository = Personal-Remote
status_backend = sqlite
postsynchook = notmuch new

[Repository Personal-Local]
type = Maildir
localfolders = ~/.mail/austin.taylor-gmail.com
nametrans = lambda folder: {'drafts':  '[Gmail]/Drafts',
                            'sent':    '[Gmail]/Sent Mail',
                            'flagged': '[Gmail]/Starred',
                            'trash':   '[Gmail]/Trash',
                            'archive': '[Gmail]/All Mail'
                            }.get(folder, folder)

[Repository Personal-Remote]
maxconnections = 1
type = Gmail
remoteuser = austin.taylor@gmail.com
remotepasseval = get_keychain_pass(account="austin.taylor@gmail.com", server="imap.gmail.com")
realdelete = no
; http://cascadianhacker.com/blog/2014/05/15_sslcacertfile-fingerprint-on-disk.html
sslcacertfile = ~/tilde/mutt/ca-bundle.crt
nametrans = lambda folder: {'[Gmail]/Drafts':    'drafts',
                            '[Gmail]/Sent Mail': 'sent',
                            '[Gmail]/Starred':   'flagged',
                            '[Gmail]/Trash':     'trash',
                            '[Gmail]/All Mail':  'archive',
                            }.get(folder, folder)
folderfilter = lambda folder: folder not in ['[Gmail]/Trash',
                                             '[Gmail]/Important',
                                             '[Gmail]/Spam']

[Account UserVoice]
localrepository = UserVoice-Local
remoterepository = UserVoice-Remote
status_backend = sqlite
postsynchook = notmuch new

[Repository UserVoice-Local]
type = Maildir
localfolders = ~/.mail/austin-uservoice.com
nametrans = lambda folder: {'drafts':  '[Gmail]/Drafts',
                            'sent':    '[Gmail]/Sent Mail',
                            'flagged': '[Gmail]/Starred',
                            'trash':   '[Gmail]/Trash',
                            'archive': '[Gmail]/All Mail'
                            }.get(folder, folder)

[Repository UserVoice-Remote]
maxconnections = 1
type = Gmail
remoteuser = austin@uservoice.com
remotepasseval = get_keychain_pass(account="austin@uservoice.com", server="imap.gmail.com")
realdelete = no
sslcacertfile = ~/tilde/mutt/ca-bundle.crt
nametrans = lambda folder: {'[Gmail]/Drafts':    'drafts',
                            '[Gmail]/Sent Mail': 'sent',
                            '[Gmail]/Starred':   'flagged',
                            '[Gmail]/Trash':     'trash',
                            '[Gmail]/All Mail':  'archive',
                            }.get(folder, folder)
folderfilter = lambda folder: folder not in ['[Gmail]/Trash',
                                             '[Gmail]/Important',
                                             'Priority',
                                             'Follow up',
                                             'Misc',
                                             '[Gmail]/Spam']

[Account Courtyard]
localrepository = Courtyard-Local
remoterepository = Courtyard-Remote
status_backend = sqlite
postsynchook = notmuch new

[Repository Courtyard-Local]
type = Maildir
localfolders = ~/.mail/austin-courtyardapp.com
nametrans = lambda folder: {'drafts':  'Drafts',
                            'sent':    'Sent Messages',
                            'trash':   'Deleted Messages',
                            'archive': 'Archive'
                            }.get(folder, folder)

[Repository Courtyard-Remote]
type = IMAP
remotehost = imap.courtyardapp.com
remoteuser = austin
remotepasseval = get_keychain_pass(account="austin@courtyardapp.com", server="imap.courtyardapp.com")
realdelete = no
maxconnections = 2
nametrans = lambda folder: {'Drafts':           'drafts',
                            'Sent Messages':    'sent',
                            'Deleted Messages': 'trash',
                            'Archive':          'archive',
                            }.get(folder, folder)
folderfilter = lambda folder: folder not in ['Apple Mail To Do', 'Junk', 'Notes']

